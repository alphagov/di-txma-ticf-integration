AWSTemplateFormatVersion: '2010-09-09'
Description: >
  A SAM template to provision infrastructure required for integrating the TxMA service with Zendesk in order to automate Athena queries
Transform: AWS::Serverless-2016-10-31

Parameters:
  CodeSigningConfigArn:
    Description: The ARN of the Code Signing Config to use, provided by the deployment pipeline
    Type: String
    Default: none
  Environment:
    Description: The environment type
    Type: String
    AllowedValues:
      - dev
      - build
      - staging
      - integration
      - production
  PermissionsBoundary:
    Description: The ARN of the permissions boundary to apply to any role created by the template
    Type: String
    Default: none

Conditions:
  UseCodeSigning: !Not [!Equals [!Ref CodeSigningConfigArn, none]]
  UsePermissionsBoundary: !Not [!Equals [!Ref PermissionsBoundary, none]]

Globals:
  Function:
    CodeSigningConfigArn: !If [UseCodeSigning, !Ref CodeSigningConfigArn, !Ref AWS::NoValue]
    CodeUri: dist/
    Environment:
      Variables:
        NODE_OPTIONS: --enable-source-maps
    PermissionsBoundary: !If [UsePermissionsBoundary, !Ref PermissionsBoundary, !Ref AWS::NoValue]
    Runtime: nodejs16.x

Resources:
  LambdaKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:*
            Resource:
              - '*'
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - kms:Decrypt
            Resource: '*'

  LambdaKmsKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/${AWS::StackName}/sandbox/lambda-kms-key #TODO: Update to !Sub alias/${AWS::StackName}/${Environment}/lambda-kms-key
      TargetKeyId: !Ref LambdaKmsKey

  LogsKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:*
            Resource:
              - '*'
          - Effect: Allow
            Principal:
              Service: !Sub logs.${AWS::Region}.amazonaws.com
            Action:
              - kms:Decrypt*
              - kms:Describe*
              - kms:Encrypt*
              - kms:GenerateDataKey*
              - kms:ReEncrypt*
            Resource:
              - '*'
            Condition:
              ArnLike:
                kms:EncryptionContext:aws:logs:arn: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*
  
  LogsKmsKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/${AWS::StackName}/sandbox/logs-kms-key #TODO: Update to !Sub alias/${AWS::StackName}/${Environment}/logs-kms-key
      TargetKeyId: !Ref LogsKmsKey

  SecretsKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:CreateGrant
              - kms:Decrypt
              - kms:DescribeKey
              - kms:GenerateDataKey*
              - kms:ReEncrypt*
            Condition:
              StringEquals:
                kms:ViaService: secretsmanager.${AWS::Region}.amazonaws.com
                kms:CallerAccount: ${AWS::AccountId}
            Resource:
              - '*'
          - Effect: Allow
            Principal:
              AWS: arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:Describe*
              - kms:Get*
              - kms:List*
              - kms:RevokeGrant
            Resource:
              - '*'

  SecretsKmsKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: alias/${AWS::StackName}/sandbox/secrets-kms-key #TODO: Update to !Sub alias/${AWS::StackName}/${Environment}/secrets-kms-key
      TargetKeyId: !Ref SecretsKmsKey

  # Data Retrieval
  InitiateDataRequestWebhookAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: !GetAtt LogsKmsKey.Arn
      LogGroupName: /aws/apigateway/initiate-data-request-webhook-api-access-logs
      RetentionInDays: 7
  
  InitiateDataRequestWebhookApi:
    #checkov:skip=CKV_AWS_120:We explicitly don't want caching because we want the lambda to fire off every time a Zendesk ticket is approved
    Type: AWS::Serverless::Api
    Properties:
      AccessLogSetting:
        DestinationArn: !GetAtt InitiateDataRequestWebhookAccessLogGroup.Arn
        Format: $context.requestId
      Name: initiate-data-request-webhook-api
      StageName: default
      TracingEnabled: true
      
  InitiateDataRequestFunction:
    #checkov:skip=CKV_AWS_116:Lambda is behind an API gateway, so repeated processing of the same message isn't a problem
    #checkov:skip=CKV_AWS_117:VPC not required
    Type: AWS::Serverless::Function
    Properties:
      Handler: initiateDataRequest.handler
      Environment:
        Variables:
          #TODO: Update with parameterised bucket name when merging with TxMA 1
          AUDIT_BUCKET_NAME: audit-sandbox-message-batch
          ANALYSIS_BUCKET_NAME: !Ref AnalysisBucket
      Events:
        Api:
          Type: Api
          Properties:
            Path: /zendesk-webhook
            Method: POST
            RestApiId: !Ref InitiateDataRequestWebhookApi
      KmsKeyArn: !GetAtt LambdaKmsKey.Arn
      ReservedConcurrentExecutions: 10
  
  # Data Analysis
  AnalysisBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      BucketName: !Sub ${AWS::StackName}-sandbox-analysis-bucket #TODO: Update to !Sub ${AWS::StackName}-${Environment}-analysis-bucket
      LifecycleConfiguration:
        Rules:
          - Id: AnalysisCleanupRule
            Status: Enabled
            ExpirationInDays: 30
      LoggingConfiguration:
        DestinationBucketName: !Sub audit/${AWS::StackName}-sandbox-analysis-bucket #TODO: Update to !Sub audit/${AWS::StackName}-${Environment}-analysis-bucket
        LogFilePrefix: String
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled

  AnalysisLogsBucket:
    #checkov:skip=CKV_AWS_18:This is the logs bucket
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-sandbox-analysis-logs #TODO: Update to !Sub ${AWS::StackName}-${Environment}-analysis-logs
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled

  # Query Bucket
  QueryResultsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      BucketName: !Sub ${AWS::StackName}-sandbox-query-results-bucket #TODO: Update to !Sub ${AWS::StackName}-${Environment}-query-results-bucket
      LifecycleConfiguration:
        Rules:
          - Id: AnalysisCleanupRule
            Status: Enabled
            ExpirationInDays: 30
      LoggingConfiguration:
        DestinationBucketName: !Ref QueryResultsLogsBucket
        LogFilePrefix: String
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled

  QueryResultsLogsBucket:
    #checkov:skip=CKV_AWS_18:This is the lquery results ogs bucket
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-sandbox-query-results-logs #TODO: Update to !Sub ${AWS::StackName}-${Environment}-analysis-logs
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
