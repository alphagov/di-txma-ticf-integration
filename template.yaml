AWSTemplateFormatVersion: '2010-09-09'
Description: Integrate TxMA service with Zendesk in order to automate Athena queries
Transform: AWS::Serverless-2016-10-31

Parameters:
  CodeSigningConfigArn:
    Description: The ARN of the Code Signing Config to use, provided by the deployment pipeline
    Type: String
    Default: none
  Environment:
    Description: The environment type
    Type: String
    AllowedValues:
      - dev
      - build
      - staging
      - integration
      - production
  PermissionsBoundary:
    Description: The ARN of the permissions boundary to apply to any role created by the template
    Type: String
    Default: none

Mappings:
  Environment:
    dev:
      DeployDevResources: true
      DeployIntegrationTestResources: true

    build:
      DeployDevResources: false
      DeployIntegrationTestResources: false

    staging:
      DeployDevResources: false
      DeployIntegrationTestResources: true

    integration:
      DeployDevResources: false
      DeployIntegrationTestResources: false

    production:
      DeployDevResources: false
      DeployIntegrationTestResources: false

Conditions:
  DeployIntegrationTestResources: !Equals [ true, !FindInMap [ Environment, !Ref Environment, DeployIntegrationTestResources ] ]
  UseCodeSigning: !Not [ !Equals [ !Ref CodeSigningConfigArn, none ] ]
  UsePermissionsBoundary: !Not [ !Equals [ !Ref PermissionsBoundary, none ] ]

Globals:
  Function:
    CodeSigningConfigArn: !If [ UseCodeSigning, !Ref CodeSigningConfigArn, !Ref AWS::NoValue ]
    CodeUri: dist/
    Environment:
      Variables:
        NODE_OPTIONS: --enable-source-maps
    PermissionsBoundary: !If [ UsePermissionsBoundary, !Ref PermissionsBoundary, !Ref AWS::NoValue ]
    ReservedConcurrentExecutions: 10
    Runtime: nodejs16.x
    Timeout: 30
  Api:
    OpenApiVersion: 3.0.1

Resources:
  AthenaResources:
    Type: AWS::Serverless::Application
    Properties:
      Location: ./infrastructure/athena.yaml
      Parameters:
        AnalysisBucketName: !GetAtt S3Resources.Outputs.AnalysisBucketName
        Environment: !Ref Environment
        StackName: !Ref AWS::StackName

  S3Resources:
    Type: AWS::Serverless::Application
    Properties:
      Location: ./infrastructure/s3.yaml
      Parameters:
        AuditBucketArn: '{{resolve:ssm:MessageBatchBucketTXMA2ARN}}'
        DeployDevResources: !FindInMap [ Environment, !Ref Environment, DeployDevResources ]
        Environment: !Ref Environment
        PermissionsBoundary: !Ref PermissionsBoundary
        StackName: !Ref AWS::StackName

  SqsResources:
    Type: AWS::Serverless::Application
    Properties:
      Location: ./infrastructure/sqs.yaml
      Parameters:
        Environment: !Ref Environment

  ZendeskWebhookApi:
    #checkov:skip=CKV_AWS_120:We explicitly don't want caching because we want the lambda to fire off every time a Zendesk ticket is approved
    Type: AWS::Serverless::Api
    Properties:
      AccessLogSetting:
        DestinationArn: !GetAtt ZendeskWebhookAccessLogGroup.Arn
        Format: $context.requestId
      Name: !Sub ${AWS::StackName}-zendesk-webhook-api
      StageName: default
      TracingEnabled: true

  ZendeskWebhookAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: '{{resolve:ssm:LogsKmsKeyArn}}'
      LogGroupName: !Sub /aws/apigateway/${AWS::StackName}-zendesk-webhook-api-access-logs
      RetentionInDays: 30

  ZendeskWebhookApiWafAssociation:
    Type: AWS::WAFv2::WebACLAssociation
    Properties: 
      ResourceArn: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}::/restapis/${ZendeskWebhookApi}/stages/${ZendeskWebhookApi.Stage}
      WebACLArn: '{{resolve:ssm:ZendeskWebhookApiWafAclArn}}'

  InitiateDataRequestFunction:
    #checkov:skip=CKV_AWS_115:Defined in Globals section
    #checkov:skip=CKV_AWS_116:Lambda is behind an API gateway, so repeated processing of the same message isn't a problem
    #checkov:skip=CKV_AWS_117:VPC not required
    Type: AWS::Serverless::Function
    Properties:
      Handler: initiateDataRequest.handler
      Environment:
        Variables:
          INITIATE_DATA_REQUEST_QUEUE_URL: !GetAtt SqsResources.Outputs.InitiateDataRequestQueueUrl
          VALID_EMAIL_RECIPIENTS_BUCKET: '{{resolve:ssm:ValidEmailRecipientsBucketName}}'
          ZENDESK_API_SECRETS_ARN: '{{resolve:ssm:ZendeskSecretSetArn}}'
          ZENDESK_FIELD_ID_DATA_PATHS: '{{resolve:ssm:ZendeskFieldIdDataPaths}}'
          ZENDESK_FIELD_ID_DATE_FROM: '{{resolve:ssm:ZendeskFieldIdDateFrom}}'
          ZENDESK_FIELD_ID_DATE_TO: '{{resolve:ssm:ZendeskFieldIdDateTo}}'
          ZENDESK_FIELD_ID_EVENT_IDS: '{{resolve:ssm:ZendeskFieldIdEventIds}}'
          ZENDESK_FIELD_ID_IDENTIFIER_TYPE: '{{resolve:ssm:ZendeskFieldIdIdentifierType}}'
          ZENDESK_FIELD_ID_JOURNEY_IDS: '{{resolve:ssm:ZendeskFieldIdJourneyIds}}'
          ZENDESK_FIELD_ID_PII_TYPES: '{{resolve:ssm:ZendeskFieldIdPiiTypes}}'
          ZENDESK_FIELD_ID_RECIPIENT_EMAIL: '{{resolve:ssm:ZendeskFieldIdRecipientEmail}}'
          ZENDESK_FIELD_ID_RECIPIENT_NAME: '{{resolve:ssm:ZendeskFieldIdRecipientName}}'
          ZENDESK_FIELD_ID_SESSION_IDS: '{{resolve:ssm:ZendeskFieldIdSessionIds}}'
          ZENDESK_FIELD_ID_USER_IDS: '{{resolve:ssm:ZendeskFieldIdUserIds}}'
      Events:
        Api:
          Type: Api
          Properties:
            Path: /zendesk-webhook
            Method: POST
            RestApiId: !Ref ZendeskWebhookApi
      FunctionName: !Sub ${AWS::StackName}-initiate-data-request
      KmsKeyArn: '{{resolve:ssm:LambdaKmsKeyArn}}'
      Policies:
        - Statement:
          - Sid: Logs
            Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !GetAtt InitiateDataRequestLogs.Arn
          - Sid: ReadSecrets
            Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
            Resource: '{{resolve:ssm:ZendeskSecretSetArn}}'
          - Sid: DecryptSecrets
            Effect: Allow
            Action:
              - kms:Decrypt
            Resource: '{{resolve:ssm:SecretsKmsKeyArn}}'
          - Sid: AllowSqsSend
            Effect: Allow
            Action:
              - sqs:SendMessage
            Resource: !GetAtt SqsResources.Outputs.InitiateDataRequestQueueArn
          - Sid: UseSqsKmsKey
            Effect: Allow
            Action:
              - kms:Decrypt
              - kms:GenerateDataKey*
              - kms:ReEncrypt*
            Resource: '{{resolve:ssm:SqsKmsKeyArn}}'
          - Sid: S3ReadEmailRecipients
            Effect: Allow
            Action:
              - s3:GetObject
            Resource:
              - !Join ['/', ['{{resolve:ssm:ValidEmailRecipientsBucketArn}}', '*']]
  InitiateDataRequestLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: '{{resolve:ssm:LogsKmsKeyArn}}'
      LogGroupName: !Sub '/aws/lambda/${AWS::StackName}-initiate-data-request'
      RetentionInDays: 30

  ProcessDataRequestFunction:
    #checkov:skip=CKV_AWS_115:Defined in Globals section
    #checkov:skip=CKV_AWS_117:VPC not required
    Type: AWS::Serverless::Function
    Properties:
      Handler: processDataRequest.handler
      Environment:
        Variables:
          AWS_ACCOUNT_ID: !Ref AWS::AccountId
          AUDIT_BUCKET_NAME: '{{resolve:ssm:MessageBatchBucketTXMA2Name}}'
          ANALYSIS_BUCKET_ARN: !GetAtt S3Resources.Outputs.AnalysisBucketArn
          ANALYSIS_BUCKET_NAME: !GetAtt S3Resources.Outputs.AnalysisBucketName
          BATCH_JOB_MANIFEST_BUCKET_ARN: '{{resolve:ssm:BatchJobManifestBucketArn}}'
          BATCH_JOB_MANIFEST_BUCKET_NAME: '{{resolve:ssm:BatchJobManifestBucketName}}'
          BATCH_JOB_ROLE_ARN: !GetAtt S3Resources.Outputs.BatchJobsRoleArn
          INITIATE_ATHENA_QUERY_QUEUE_URL: !GetAtt SqsResources.Outputs.InitiateAthenaQueryQueueUrl
          INITIATE_DATA_REQUEST_QUEUE_URL: !GetAtt SqsResources.Outputs.InitiateDataRequestQueueUrl
          QUERY_REQUEST_DYNAMODB_TABLE_NAME: '{{resolve:ssm:QueryRequestTableName}}'
          TERMINATED_JOB_QUEUE_URL: !GetAtt SqsResources.Outputs.TerminatedJobQueueUrl
          ZENDESK_API_SECRETS_ARN: '{{resolve:ssm:ZendeskSecretSetArn}}'
      Events:
        InitiateDataRequestEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt SqsResources.Outputs.InitiateDataRequestQueueArn
            BatchSize: 1
      FunctionName: !Sub ${AWS::StackName}-process-data
      KmsKeyArn: '{{resolve:ssm:LambdaKmsKeyArn}}'
      Policies:
        - Statement:
            - Sid: S3Read
              Effect: Allow
              Action:
                - s3:ListBucket
              Resource:
                - !GetAtt S3Resources.Outputs.AnalysisBucketArn
                - '{{resolve:ssm:MessageBatchBucketTXMA2ARN}}'
            - Sid: ManifestBucketWrite
              Effect: Allow
              Action:
                - s3:PutObject
              Resource: !Join [ '/', [ '{{resolve:ssm:BatchJobManifestBucketArn}}', '*' ] ]
            - Sid: AllowCreateS3BatchJobs
              Effect: Allow
              Action:
                - s3:CreateJob
              Resource: '*'
            - Sid: AssumeBatchJobRole
              Effect: Allow
              Action:
                - iam:PassRole
              Resource: !GetAtt S3Resources.Outputs.BatchJobsRoleArn
            - Sid: Logs
              Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !GetAtt ProcessDataRequestLogs.Arn
            - Sid: ReadSecrets
              Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: '{{resolve:ssm:ZendeskSecretSetArn}}'
            - Sid: DecryptKmsKeys
              Effect: Allow
              Action:
                - kms:Decrypt
              Resource: 
                - '{{resolve:ssm:SecretsKmsKeyArn}}'
                - '{{resolve:ssm:DatabaseKmsKeyArn}}'
            - Sid: QueryRequestTableReadWrite
              Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
              Resource: '{{resolve:ssm:QueryRequestTableArn}}'
            - Sid: AllowSqsSend
              Effect: Allow
              Action:
                - sqs:SendMessage
              Resource:
                - !GetAtt SqsResources.Outputs.InitiateAthenaQueryQueueArn
                - !GetAtt SqsResources.Outputs.InitiateDataRequestQueueArn
                - !GetAtt SqsResources.Outputs.TerminatedJobQueueArn
            - Sid: UseSqsKmsKey
              Effect: Allow
              Action:
                - kms:Decrypt
                - kms:GenerateDataKey*
                - kms:ReEncrypt*
              Resource: '{{resolve:ssm:SqsKmsKeyArn}}'
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt SqsResources.Outputs.InitiateDataRequestDeadLetterQueueArn

  ProcessDataRequestLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: '{{resolve:ssm:LogsKmsKeyArn}}'
      LogGroupName: !Sub '/aws/lambda/${AWS::StackName}-process-data'
      RetentionInDays: 30
  
  InitiateAthenaQueryFunction:
    #checkov:skip=CKV_AWS_115:Defined in Globals section
    #checkov:skip=CKV_AWS_117:VPC not required
    Type: AWS::Serverless::Function
    Properties:
      Handler: initiateAthenaQuery.handler
      Environment:
        Variables:
          ATHENA_DATABASE_NAME: '{{resolve:ssm:AuditAnalysisDatabaseName}}'
          ATHENA_TABLE_NAME: !GetAtt AthenaResources.Outputs.AuditAnalysisTableName
          ATHENA_WORKGROUP_NAME: '{{resolve:ssm:AthenaAnalysisWorkgroupName}}'
          QUERY_REQUEST_DYNAMODB_TABLE_NAME: '{{resolve:ssm:QueryRequestTableName}}'
          ZENDESK_API_SECRETS_ARN: '{{resolve:ssm:ZendeskSecretSetArn}}'
      Events:
        InitiateAthenaQueryEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt SqsResources.Outputs.InitiateAthenaQueryQueueArn
            BatchSize: 1
      FunctionName: !Sub ${AWS::StackName}-initiate-athena-query
      KmsKeyArn: '{{resolve:ssm:LambdaKmsKeyArn}}'
      Policies:
        - Statement:
          - Sid: GetGlueTables
            Effect: Allow
            Action: 
              - glue:GetTable
            Resource: 
              - !Sub arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:catalog
              - '{{resolve:ssm:AuditAnalysisDatabaseArn}}'
              - !GetAtt AthenaResources.Outputs.AuditAnalysisTableArn
          - Sid: StartAthenaQuery
            Effect: Allow
            Action: 
              - athena:StartQueryExecution
            Resource: '{{resolve:ssm:AthenaAnalysisWorkgroupArn}}'
          - Sid: ReadFromAnalysisBucket
            Effect: Allow
            Action:
              - s3:ListBucket
              - s3:GetObject
            Resource:
              - !GetAtt S3Resources.Outputs.AnalysisBucketArn
              - !Join ['/', [ !GetAtt S3Resources.Outputs.AnalysisBucketArn, '*' ] ]
          - Sid: WriteToResultsBucket
            Effect: Allow
            Action:
              - s3:GetBucketLocation
              - s3:GetObject
              - s3:ListBucket
              - s3:ListBucketMultipartUploads
              - s3:ListMultipartUploadParts
              - s3:AbortMultipartUpload
              - s3:PutObject
            Resource: 
            - '{{resolve:ssm:QueryResultsBucketArn}}'
            - '{{resolve:ssm:QueryResultsBucketArn}}/*'
          - Sid: Logs
            Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !GetAtt InitiateAthenaQueryLogs.Arn
          - Sid: ReadSecrets
            Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
            Resource: '{{resolve:ssm:ZendeskSecretSetArn}}'
          - Sid: DecryptKmsKeys
            Effect: Allow
            Action:
              - kms:Decrypt
            Resource:
              - '{{resolve:ssm:DatabaseKmsKeyArn}}'
              - '{{resolve:ssm:SecretsKmsKeyArn}}'
              - '{{resolve:ssm:SqsKmsKeyArn}}'
          - Sid: QueryRequestTableReadWrite
            Effect: Allow
            Action:
              - dynamodb:PutItem
              - dynamodb:GetItem
              - dynamodb:UpdateItem
            Resource: '{{resolve:ssm:QueryRequestTableArn}}'
          - Sid: Events
            Effect: Allow
            Action: 
              - events:PutEvents
            Resource:
              - '*'
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt SqsResources.Outputs.InitiateAthenaQueryDeadLetterQueueArn

  InitiateAthenaQueryLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: '{{resolve:ssm:LogsKmsKeyArn}}'
      LogGroupName: !Sub '/aws/lambda/${AWS::StackName}-initiate-athena-query'
      RetentionInDays: 30

  SendQueryResultsNotificationFunction:
    #checkov:skip=CKV_AWS_115:Defined in Globals section
    #checkov:skip=CKV_AWS_116:Not triggered by SQS
    #checkov:skip=CKV_AWS_117:VPC not required
    Type: AWS::Serverless::Function
    Properties:
      Handler: sendQueryResultsNotification.handler
      Environment:
        Variables:
          QUERY_REQUEST_DYNAMODB_TABLE_NAME: '{{resolve:ssm:QueryRequestTableName}}'
          QUERY_RESULTS_BUCKET_NAME: !Sub txma-qr-infra-${Environment}-query-results-bucket
          SEND_EMAIL_QUEUE_URL: !GetAtt SqsResources.Outputs.SendEmailQueueUrl
          ZENDESK_API_SECRETS_ARN: '{{resolve:ssm:ZendeskSecretSetArn}}'
      FunctionName: !Sub ${AWS::StackName}-send-query-results-notification
      KmsKeyArn: '{{resolve:ssm:LambdaKmsKeyArn}}'
      Policies:
        - Statement:
          - Sid: WriteToResultsBucket
            Effect: Allow
            Action:
              - s3:AbortMultipartUpload
              - s3:GetBucketLocation
              - s3:GetObject
              - s3:ListBucket
              - s3:ListBucketMultipartUploads
              - s3:ListMultipartUploadParts
              - s3:PutObject
            Resource:
              - !Sub arn:aws:s3:::txma-qr-infra-${Environment}-query-results-bucket
              - !Sub arn:aws:s3:::txma-qr-infra-${Environment}-query-results-bucket/*
          - Sid: DecryptKmsKeys
            Effect: Allow
            Action:
              - kms:Decrypt
            Resource:
              - '{{resolve:ssm:DatabaseKmsKeyArn}}'
              - '{{resolve:ssm:SecretsKmsKeyArn}}'
              - '{{resolve:ssm:SqsKmsKeyArn}}'
          - Sid: Logs
            Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !GetAtt SendQueryResultsNotificationLogs.Arn
          - Sid: SecretsManager
            Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
            Resource: '{{resolve:ssm:ZendeskSecretSetArn}}'
          - Sid: QueryRequestTableReadWrite
            Effect: Allow
            Action:
              - dynamodb:PutItem
              - dynamodb:GetItem
              - dynamodb:UpdateItem
              - dynamodb:Query
            Resource:
              - '{{resolve:ssm:QueryRequestTableArn}}'
              - '{{resolve:ssm:QueryRequestTableArn}}/index/athenaQueryIdIndex'
          - Sid: AllowSqsSend
            Effect: Allow
            Action:
              - sqs:SendMessage
            Resource: !GetAtt SqsResources.Outputs.SendEmailQueueArn
          - Sid: UseSqsKmsKey
            Effect: Allow
            Action:
              - kms:Decrypt
              - kms:GenerateDataKey*
              - kms:ReEncrypt*
            Resource: '{{resolve:ssm:SqsKmsKeyArn}}'

  SendQueryResultsNotificationLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: '{{resolve:ssm:LogsKmsKeyArn}}'
      LogGroupName: !Sub '/aws/lambda/${AWS::StackName}-send-query-results-notification'
      RetentionInDays: 30

  SendEmailRequestToNotifyFunction:
    #checkov:skip=CKV_AWS_115:Defined in Globals section
    #checkov:skip=CKV_AWS_116:Unsure of what will call the function currently - need revision at a later point
    #checkov:skip=CKV_AWS_117:VPC not required
    Type: AWS::Serverless::Function
    Properties:
      Handler: sendEmailRequestToNotify.handler
      Environment:
        Variables:
          NOTIFY_API_SECRETS_ARN: '{{resolve:ssm:NotifySecretSetArn}}'
          ZENDESK_API_SECRETS_ARN: '{{resolve:ssm:ZendeskSecretSetArn}}'
      FunctionName: !Sub ${AWS::StackName}-send-email-request-to-notify
      KmsKeyArn: '{{resolve:ssm:LambdaKmsKeyArn}}'
      Events:
        SendEmailEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt SqsResources.Outputs.SendEmailQueueArn
            BatchSize: 1
      Policies:
        - Statement:
          - Sid: Logs
            Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !GetAtt SendEmailRequestToNotifyLogs.Arn
          - Sid: ReadSecrets
            Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
            Resource:
              - '{{resolve:ssm:NotifySecretSetArn}}'
              - '{{resolve:ssm:ZendeskSecretSetArn}}'
          - Sid: DecryptKmsKeys
            Effect: Allow
            Action:
              - kms:Decrypt
            Resource:
              - '{{resolve:ssm:SecretsKmsKeyArn}}'
              - '{{resolve:ssm:SqsKmsKeyArn}}'

  SendEmailRequestToNotifyLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: '{{resolve:ssm:LogsKmsKeyArn}}'
      LogGroupName: !Sub '/aws/lambda/${AWS::StackName}-send-email-request-to-notify'
      RetentionInDays: 30

  PermissionForAthenaEventToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SendQueryResultsNotificationFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt AthenaEBRule.Arn

  AthenaEBRule:
    Type: AWS::Events::Rule
    Properties:
      Description: The rule listening for Athena Status Change Events and triggering the sendEmailRequestToNotify lambda
      EventPattern:
        source:
          - 'aws.athena'
        detail-type:
          - 'Athena Query State Change'
        detail:
          currentState:
            - 'SUCCEEDED'
            - 'FAILED'
            - 'CANCELLED'
      State: 'ENABLED'
      Targets:
        - Arn: !GetAtt SendQueryResultsNotificationFunction.Arn
          Id: AthenaEventTarget
