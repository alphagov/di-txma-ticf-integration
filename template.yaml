AWSTemplateFormatVersion: '2010-09-09'
Description: >
  A SAM template to provision infrastructure required for integrating the TxMA service with Zendesk in order to automate Athena queries
Transform: AWS::Serverless-2016-10-31

Parameters:
  CodeSigningConfigArn:
    Description: The ARN of the Code Signing Config to use, provided by the deployment pipeline
    Type: String
    Default: none
  Environment:
    Description: The environment type
    Type: String
    AllowedValues:
      - dev
      - build
      - staging
      - integration
      - production
  PermissionsBoundary:
    Description: The ARN of the permissions boundary to apply to any role created by the template
    Type: String
    Default: none

Conditions:
  DeployS3Cleanup: !Equals [ !Ref Environment, dev]
  UseCodeSigning: !Not [!Equals [!Ref CodeSigningConfigArn, none]]
  UsePermissionsBoundary: !Not [!Equals [!Ref PermissionsBoundary, none]]

Globals:
  Function:
    CodeSigningConfigArn: !If [UseCodeSigning, !Ref CodeSigningConfigArn, !Ref AWS::NoValue]
    CodeUri: dist/
    Environment:
      Variables:
        NODE_OPTIONS: --enable-source-maps
    PermissionsBoundary: !If [UsePermissionsBoundary, !Ref PermissionsBoundary, !Ref AWS::NoValue]
    Runtime: nodejs16.x
    Timeout: 15

Resources:
  LambdaKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:*
            Resource:
              - '*'
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - kms:Decrypt
            Resource: '*'

  LambdaKmsKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/${AWS::StackName}/sandbox/lambda-kms-key #TODO: Update to !Sub alias/${AWS::StackName}/${Environment}/lambda-kms-key
      TargetKeyId: !Ref LambdaKmsKey

  LogsKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:*
            Resource:
              - '*'
          - Effect: Allow
            Principal:
              Service: !Sub logs.${AWS::Region}.amazonaws.com
            Action:
              - kms:Decrypt*
              - kms:Describe*
              - kms:Encrypt*
              - kms:GenerateDataKey*
              - kms:ReEncrypt*
            Resource:
              - '*'
            Condition:
              ArnLike:
                kms:EncryptionContext:aws:logs:arn: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*

  LogsKmsKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/${AWS::StackName}/sandbox/logs-kms-key #TODO: Update to !Sub alias/${AWS::StackName}/${Environment}/logs-kms-key
      TargetKeyId: !Ref LogsKmsKey

  SecretsSet:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub ${AWS::StackName}-ZendeskApiSecrets
      KmsKeyId: !Ref SecretsKmsKeyAlias

  SecretsKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:CreateGrant
              - kms:Decrypt
              - kms:DescribeKey
              - kms:GenerateDataKey*
              - kms:ReEncrypt*
            Condition:
              StringEquals:
                kms:ViaService: !Sub secretsmanager.${AWS::Region}.amazonaws.com
                kms:CallerAccount: !Sub ${AWS::AccountId}
            Resource:
              - '*'
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:*
            Resource:
              - '*'

  SecretsKmsKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/${AWS::StackName}/sandbox/secrets-kms-key #TODO: Update to !Sub alias/${AWS::StackName}/${Environment}/secrets-kms-key
      TargetKeyId: !Ref SecretsKmsKey

  QueueKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:CreateGrant
              - kms:Decrypt
              - kms:DescribeKey
              - kms:GenerateDataKey*
              - kms:ReEncrypt*
            Resource:
              - '*'
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:*
            Resource:
              - '*'

  QueueKmsKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/${AWS::StackName}/sandbox/queue-kms-key
      TargetKeyId: !Ref QueueKmsKey

  DatabaseKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:*
            Resource:
              - '*'

  DatabaseKmsKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/${AWS::StackName}/sandbox/database-kms-key
      TargetKeyId: !Ref DatabaseKmsKey

  # Data Retrieval
  ZendeskWebhookAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: !GetAtt LogsKmsKey.Arn
      LogGroupName: !Sub /aws/apigateway/${ZendeskWebhookApi}-access-logs
      RetentionInDays: 7

  ZendeskWebhookApi:
    #checkov:skip=CKV_AWS_120:We explicitly don't want caching because we want the lambda to fire off every time a Zendesk ticket is approved
    Type: AWS::Serverless::Api
    Properties:
      AccessLogSetting:
        DestinationArn: !GetAtt ZendeskWebhookAccessLogGroup.Arn
        Format: $context.requestId
      Name: !Sub ${AWS::StackName}-zendesk-webhook-api
      StageName: default
      TracingEnabled: true

  InitiateDataRequestFunction:
    #checkov:skip=CKV_AWS_116:Lambda is behind an API gateway, so repeated processing of the same message isn't a problem
    #checkov:skip=CKV_AWS_117:VPC not required
    Type: AWS::Serverless::Function
    Properties:
      Handler: initiateDataRequest.handler
      Environment:
        Variables:
          #TODO: Update with parameterised bucket name when merging with TxMA 1
          AUDIT_BUCKET_NAME: audit-sandbox-message-batch
          ANALYSIS_BUCKET_NAME: !Ref AnalysisBucket
          ZENDESK_API_SECRETS_NAME: !Sub ${AWS::StackName}-ZendeskApiSecrets
          INITIATE_DATA_REQUEST_QUEUE_URL: !Ref InitiateDataRequestQueue
      Events:
        Api:
          Type: Api
          Properties:
            Path: /zendesk-webhook
            Method: POST
            RestApiId: !Ref ZendeskWebhookApi
      KmsKeyArn: !GetAtt LambdaKmsKey.Arn
      Policies:
        - Statement:
          - Sid: S3Permissions
            Effect: Allow
            Action:
              - s3:ListBucket
            Resource:
              - !GetAtt AnalysisBucket.Arn
              - arn:aws:s3:::audit-sandbox-message-batch #TODO: Update with parameter when merging with TxMA 1
          - Sid: Logs
            Effect: Allow
            Action:
              - logs:*
            Resource: arn:aws:logs:*:*:*
          - Sid: SecretsManager
            Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
            Resource:
              - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:zendesk-api-secrets-??????
              - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${AWS::StackName}-ZendeskApiSecrets-??????
          - Sid: KmsSecretsDecryptionKey
            Effect: Allow
            Action:
              - kms:Decrypt
            Resource:
              - !GetAtt SecretsKmsKey.Arn
          - Sid: AllowQueueSend
            Effect: Allow
            Action:
              - sqs:SendMessage
            Resource:
              - !GetAtt InitiateDataRequestQueue.Arn
          - Sid: AllowQueueKmsAccess
            Effect: Allow
            Action:
              - kms:GenerateDataKey
              - kms:Encrypt
              # For some reason, Decrypt is needed to add items to the queue.
              # See here for some discussion of this: https://github.com/aws/aws-cdk/issues/6609
              - kms:Decrypt
            Resource:
              - !GetAtt QueueKmsKey.Arn
      ReservedConcurrentExecutions: 10
      Timeout: 900

  ProcessDataRequestFunction:
    #checkov:skip=CKV_AWS_117:VPC not required
    Type: AWS::Serverless::Function
    Properties:
      Handler: processDataRequest.handler
      Environment:
        Variables:
          #TODO: Update with parameterised bucket name when merging with TxMA 1
          AUDIT_BUCKET_NAME: audit-sandbox-message-batch
          ANALYSIS_BUCKET_NAME: !Ref AnalysisBucket
          DYNAMODB_TABLE_NAME: !Ref QueryRequestDynamoDBTable
          ZENDESK_API_SECRETS_NAME: !Sub ${AWS::StackName}-ZendeskApiSecrets
          BATCH_JOB_MANIFEST_BUCKET_ARN: !GetAtt BatchJobManifestBucket.Arn
          BATCH_JOB_MANIFEST_BUCKET_NAME: !Ref BatchJobManifestBucket
          BATCH_JOB_ROLE_ARN: !GetAtt BatchJobsRole.Arn
          ACCOUNT_ID: !Sub ${AWS::AccountId}
      Events:
        InitiateDataRequestEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt InitiateDataRequestQueue.Arn
            BatchSize: 1
      KmsKeyArn: !GetAtt LambdaKmsKey.Arn
      Policies:
        - Statement:
            - Sid: S3Permissions
              Effect: Allow
              Action:
                - s3:ListBucket
              Resource:
                - !GetAtt AnalysisBucket.Arn
                - arn:aws:s3:::audit-sandbox-message-batch #TODO: Update with parameter when merging with TxMA 1
            - Sid: S3AllowJobManifestWrite
              Effect: Allow
              Action:
                - s3:PutObject
              Resource:
                - !Join ['/', [!GetAtt BatchJobManifestBucket.Arn, '*']]
            - Sid: Logs
              Effect: Allow
              Action:
                - logs:*
              Resource: arn:aws:logs:*:*:*
            - Sid: KmsQueueAllowDecrypt
              Effect: Allow
              Action:
                - kms:Decrypt
              Resource:
                - !GetAtt QueueKmsKey.Arn
            - Sid: SecretsManager
              Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource:
                - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${AWS::StackName}-ZendeskApiSecrets-??????
            - Sid: KmsSecretsDecryptionKey
              Effect: Allow
              Action:
                - kms:Decrypt
              Resource:
                - !GetAtt SecretsKmsKey.Arn
            - Sid: KmsDatabaseDecryptionKey
              Effect: Allow
              Action:
                - kms:Decrypt
              Resource:
                - !GetAtt DatabaseKmsKey.Arn
            - Sid: DynamoDBPut
              Effect: Allow
              Action:
                - dynamodb:PutItem
              Resource:
                - !GetAtt QueryRequestDynamoDBTable.Arn
            - Sid: AllowS3JobCreate
              Effect: Allow
              Action:
                - s3:CreateJob
            - Sid: AllowBatchJobPassRole
              Effect: Allow
              Action:
                - iam:PassRole
              Resource:
                - !GetAtt BatchJobsRole.Arn
      ReservedConcurrentExecutions: 10
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt InitiateDataRequestDeadLetterQueue.Arn
  
  InitiateDataRequestQueue:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: !GetAtt QueueKmsKey.Arn
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt InitiateDataRequestDeadLetterQueue.Arn
        maxReceiveCount: 5

  InitiateDataRequestDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: !GetAtt QueueKmsKey.Arn

  # Data Analysis
  AnalysisBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      BucketName: !Sub ${AWS::StackName}-sandbox-analysis-bucket #TODO: Update to !Sub ${AWS::StackName}-${Environment}-analysis-bucket
      LifecycleConfiguration:
        Rules:
          - Id: AnalysisCleanupRule
            Status: Enabled
            ExpirationInDays: 30
      LoggingConfiguration:
        DestinationBucketName: !Ref AnalysisLogsBucket
        LogFilePrefix: String
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled

  AnalysisLogsBucket:
    #checkov:skip=CKV_AWS_18:This is the logs bucket
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-sandbox-analysis-logs #TODO: Update to !Sub ${AWS::StackName}-${Environment}-analysis-logs
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled

  BatchJobManifestBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      BucketName: !Sub ${AWS::StackName}-batch-job-manifest-bucket #TODO: Update to !Sub ${AWS::StackName}-${Environment}-batch-job-manifest-bucket
      LifecycleConfiguration:
        Rules:
          - Id: BatchJobManifestCleanupRule
            Status: Enabled
            ExpirationInDays: 5
      LoggingConfiguration:
        DestinationBucketName: !Ref BatchJobBucketLogsBucket
        LogFilePrefix: String
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled

  BatchJobBucketLogsBucket:
    #checkov:skip=CKV_AWS_18:This is the logs bucket
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-sandbox-batch-job-bucket-logs #TODO: Update to !Sub ${AWS::StackName}-${Environment}--batch-job-bucket-log
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled

  BatchJobsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - batchoperations.s3.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: AllowS3BatchRestore
        PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - s3:RestoreObject
              Resource:
                - arn:aws:s3:::audit-sandbox-message-batch/* #TODO: Update with parameter when merging with TxMA 1
            - Effect: Allow
              Action:
                -  "s3:GetObject"
                -  "s3:GetObjectVersion"
              Resource:
                - !GetAtt BatchJobManifestBucket.Arn
  # Data Analysis

  InitiateAthenaQueryFunction:
    #checkov:skip=CKV_AWS_117:VPC not required
    Type: AWS::Serverless::Function
    Properties:
      Handler: initiateAthenaQuery.handler
      Environment:
        Variables:
          ATHENA_DATABASE_NAME: !Ref AuditAnalysisDatabase
          ATHENA_TABLE_NAME: !Ref AuditAnalysisTable
          DYNAMODB_TABLE_NAME: !Ref QueryRequestDynamoDBTable
      Events:
        InitiateAthenaQueryEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt InitiateAthenaQueryQueue.Arn
            BatchSize: 1
      KmsKeyArn: !GetAtt LambdaKmsKey.Arn
      Policies:
        - Statement:
          - Sid: AthenaPermissions
            Effect: Allow
            Action: 
              - glue:GetTable
            Resource: 
              - !Sub arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:catalog
              - !Sub arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:database/*
              - !Sub arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:table/*
              - !Sub arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:userDefinedFunction/*
          - Sid: SqsPermissions
            Effect: Allow
            Action:
              - sqs:ReceiveMessage
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
            Resource: 
              - !GetAtt InitiateAthenaQueryQueue.Arn
          - Sid: Logs
            Effect: Allow
            Action:
              - logs:*
            Resource: arn:aws:logs:*:*:*
          - Sid: SecretsManager
            Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
            Resource: 
              - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:zendesk-api-secrets-??????
          - Sid: KmsSecretsDecryptionKey
            Effect: Allow
            Action:
              - kms:Decrypt
            Resource:
              - !GetAtt SecretsKmsKey.Arn
          - Sid: KmsDatabaseDecryptionKey
            Effect: Allow
            Action:
              - kms:Decrypt
            Resource:
              - !GetAtt DatabaseKmsKey.Arn
          - Sid: DynamoDBPutQuery
            Effect: Allow
            Action:
              - dynamodb:PutItem
              - dynamodb:GetItem
            Resource:
              - !GetAtt QueryRequestDynamoDBTable.Arn
      ReservedConcurrentExecutions: 10
      DeadLetterQueue:
        TargetArn: !GetAtt InitiateAthenaQueryDeadLetterQueue.Arn 
        Type: SQS

  #NOTE - This is a placeholder SQS queue which will be replaced - it is here to enable the Athena lambda to be created 
  InitiateAthenaQueryQueue:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: !GetAtt QueueKmsKey.Arn
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt InitiateAthenaQueryDeadLetterQueue.Arn
        maxReceiveCount: 5

  InitiateAthenaQueryDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: !GetAtt QueueKmsKey.Arn

  QueryResultsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      BucketName: !Sub ${AWS::StackName}-sandbox-query-results-bucket #TODO: Update to !Sub ${AWS::StackName}-${Environment}-query-results-bucket
      LifecycleConfiguration:
        Rules:
          - Id: AnalysisCleanupRule
            Status: Enabled
            ExpirationInDays: 30
      LoggingConfiguration:
        DestinationBucketName: !Ref QueryResultsLogsBucket
        LogFilePrefix: String
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled

  QueryResultsLogsBucket:
    #checkov:skip=CKV_AWS_18:This is the query results logs bucket
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-sandbox-query-results-logs #TODO: Update to !Sub ${AWS::StackName}-${Environment}-analysis-logs
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled

  # Athena Data Source
  AuditAnalysisDatabase:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Description: "TxMA - Event Message Analysis Database"
        Name:  !Join ["", [ !Join [ "", !Split [ "-", !Sub "${AWS::StackName}"]], "_sandbox_analysis_database" ] ]    #TODO: Update to !Join ["", [ !Join [ "", !Split [ "-", !Sub "${AWS::StackName}"]], "_", "${Environment}", "_analysis_database" ] ]

  AuditAnalysisTable:
    Type: AWS::Glue::Table
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseName: !Ref AuditAnalysisDatabase
      TableInput:
        Description: "Table contains event message data to be analysed"
        Name: !Join ["", [ !Join [ "", !Split [ "-", !Sub "${AWS::StackName}"]], "_sandbox_analysis_table" ] ] #TODO: Update to !Join ["", [ !Join [ "", !Split [ "-", !Sub "${AWS::StackName}"]], "_", "${Environment}", "_analysis_table" ] ]
        Parameters:
          has_encrypted_data: false
          projection.enabled: true
          projection.datetime.type: date
          projection.datetime.range: '2022/01/01/00,NOW'
          projection.datetime.format: 'yyyy/MM/dd/HH'
          projection.datetime.interval: 1
          projection.datetime.interval.unit: HOURS
          storage.location.template: !Join ["", ["s3://", !Sub "${AWS::StackName}", "-sandbox-analysis-bucket/firehose/${datetime}/" ]] #TODO: Update to !Join ["", ["s3://", !Sub "${AWS::StackName}", "-", !Sub "${Environment}", "-analysis-bucket/firehose/${datetime}/" ]]
        PartitionKeys:
          - {Name: "datetime", Type: string}
        StorageDescriptor:
          Columns:
            - {Name: "event_id", Type: string}
            - {Name: "client_id", Type: string}
            - {Name: "timestamp", Type: bigint}
            - {Name: "timestamp_formatted", Type: string}
            - {Name: "event_name", Type: string}
            - {Name: "component_id", Type: string}
            - {Name: "user", Type: string}
            - {Name: "platform", Type: string}
            - {Name: "restricted", Type: string}
            - {Name: "extensions", Type: string}
          Compressed: true
          InputFormat: "org.apache.hadoop.mapred.TextInputFormat"
          Location: !Sub s3://${AWS::StackName}-sandbox-analysis-bucket/firehose/ #TODO: Update to !Sub s3://${AWS::StackName}-${Environment}-sandbox-analysis-bucket/firehose/
          OutputFormat: "org.apache.hadoop.hive.ql.io.IgnoreKeyTextOutputFormat"
          SerdeInfo:
            Parameters: {"ignore.malformed.json": true,"serialiazation.format": 1,"field.delim":""}
            SerializationLibrary: "org.openx.data.jsonserde.JsonSerDe"
          StoredAsSubDirectories: false
        TableType: EXTERNAL_TABLE

  AthenaAnalysisWorkgroup:
    Type: AWS::Athena::WorkGroup
    Properties:
      Description: The workgroup for TxMA queries
      Name: !Sub ${AWS::StackName}-sandbox-analysis-queries-workgroup #TODO: Update to !Sub ${AWS::StackName}-${Environment}-analysis-queries-workgroup
      WorkGroupConfiguration:
        EnforceWorkGroupConfiguration: true
        PublishCloudWatchMetricsEnabled: false
        ResultConfiguration:
          EncryptionConfiguration:
            EncryptionOption: "SSE_S3"
          OutputLocation: !Join ['', ['s3://', !Ref QueryResultsBucket, '/'] ]

  QueryRequestDynamoDBTable: 
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions: 
        - AttributeName: "zendeskId"
          AttributeType: "S"
        - AttributeName: "s3MoveId"
          AttributeType: "S"
        - AttributeName: "glacierRetrieveId"
          AttributeType: "S"
        - AttributeName: "glacierMoveId"
          AttributeType: "S"
        - AttributeName: "athenaQueryId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "zendeskId"
          KeyType: "HASH"
      GlobalSecondaryIndexes:
        - IndexName: s3MoveIdIndex
          KeySchema:
            - AttributeName: "s3MoveId"
              KeyType: "HASH"
          Projection:
            ProjectionType: "KEYS_ONLY"
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
        - IndexName: glacierRetrieveIdIndex
          KeySchema:
            - AttributeName: "glacierRetrieveId"
              KeyType: "HASH"
          Projection:
            ProjectionType: "KEYS_ONLY"
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
        - IndexName: glacierMoveIdIndex
          KeySchema:
            - AttributeName: "glacierMoveId"
              KeyType: "HASH"
          Projection:
            ProjectionType: "KEYS_ONLY"
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
        - IndexName: athenaQueryIdIndex
          KeySchema:
            - AttributeName: "athenaQueryId"
              KeyType: "HASH"
          Projection:
            ProjectionType: "KEYS_ONLY"
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
        SSEType: KMS
        KMSMasterKeyId: !GetAtt DatabaseKmsKey.Arn

  # Dev Resources
  EmptyS3BucketsFunction:
    #checkov:skip=CKV_AWS_116:DLQ not required as failures will be reported to CloudFormation
    #checkov:skip=CKV_AWS_117:VPC not required
    Condition: DeployS3Cleanup
    Type: AWS::Serverless::Function
    Properties:
      Handler: emptyS3Buckets.handler
      KmsKeyArn: !GetAtt LambdaKmsKey.Arn
      Policies:
        - Statement:
          - Sid: CloudFormationListResources
            Effect: Allow
            Action:
              - cloudformation:ListStackResources
            Resource: '*'
          - Sid: Logs
            Effect: Allow
            Action:
              - logs:*
            Resource: arn:aws:logs:*:*:*
          - Sid: S3Permissions
            Effect: Allow
            Action:
              - s3:DeleteObject*
              - s3:GetBucketVersioning
              - s3:ListBucket
              - s3:ListBucketVersions
              - s3:PutBucketVersioning
            Resource: '*'
      ReservedConcurrentExecutions: 10
      Timeout: 900

  EmptyS3Buckets:
    Type: AWS::CloudFormation::CustomResource
    Condition: DeployS3Cleanup
    Properties:
      ServiceToken: !GetAtt EmptyS3BucketsFunction.Arn
